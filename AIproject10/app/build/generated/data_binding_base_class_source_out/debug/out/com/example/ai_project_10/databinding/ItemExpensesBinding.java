// Generated by view binder compiler. Do not edit!
package com.example.ai_project_10.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.ai_project_10.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemExpensesBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView expenseAmount;

  @NonNull
  public final TextView expenseCategory;

  @NonNull
  public final TextView expenseDate;

  @NonNull
  public final TextView expenseName;

  @NonNull
  public final RelativeLayout itemExpenses;

  private ItemExpensesBinding(@NonNull RelativeLayout rootView, @NonNull TextView expenseAmount,
      @NonNull TextView expenseCategory, @NonNull TextView expenseDate,
      @NonNull TextView expenseName, @NonNull RelativeLayout itemExpenses) {
    this.rootView = rootView;
    this.expenseAmount = expenseAmount;
    this.expenseCategory = expenseCategory;
    this.expenseDate = expenseDate;
    this.expenseName = expenseName;
    this.itemExpenses = itemExpenses;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemExpensesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemExpensesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_expenses, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemExpensesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.expenseAmount;
      TextView expenseAmount = ViewBindings.findChildViewById(rootView, id);
      if (expenseAmount == null) {
        break missingId;
      }

      id = R.id.expenseCategory;
      TextView expenseCategory = ViewBindings.findChildViewById(rootView, id);
      if (expenseCategory == null) {
        break missingId;
      }

      id = R.id.expenseDate;
      TextView expenseDate = ViewBindings.findChildViewById(rootView, id);
      if (expenseDate == null) {
        break missingId;
      }

      id = R.id.expenseName;
      TextView expenseName = ViewBindings.findChildViewById(rootView, id);
      if (expenseName == null) {
        break missingId;
      }

      RelativeLayout itemExpenses = (RelativeLayout) rootView;

      return new ItemExpensesBinding((RelativeLayout) rootView, expenseAmount, expenseCategory,
          expenseDate, expenseName, itemExpenses);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
